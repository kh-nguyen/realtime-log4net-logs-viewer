@{
    ViewBag.Title = "Home Page";
}

<div class="row row-no-padding">
    <table id="system-logs-table" system-logs></table>
    <div id="system-logs-table-pager"></div>

    <div>
        <label for="system-logs-table-rows-limit">Rows Limit:</label>&nbsp;
        <select id="system-logs-table-rows-limit">
            <option value="50">50</option>
            <option value="100" selected="selected">100</option>
            <option value="500">500</option>
            <option value="1000">1000</option>
            <option value="5000">5000</option>
        </select>
    </div>
</div>

@section styles {
    <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet">
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css" rel="stylesheet">
    <link href="//code.jquery.com/ui/1.11.4/themes/cupertino/jquery-ui.min.css" rel="stylesheet">
    <link href="//cdn.jsdelivr.net/free-jqgrid/4.13.0/plugins/ui.multiselect.css" rel="stylesheet">
    <link href="//cdn.jsdelivr.net/free-jqgrid/4.13.0/css/ui.jqgrid.min.css" rel="stylesheet">
    <link href="//cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.4.5/jquery-ui-timepicker-addon.min.css" rel="stylesheet">
}

@section scripts {
    <script src="//code.jquery.com/jquery-2.2.0.min.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
    <script src="//code.jquery.com/ui/1.11.4/jquery-ui.min.js"></script>
    <script src="//www.google.com/jsapi" type="text/javascript"></script>
    <script src="//cdn.jsdelivr.net/free-jqgrid/4.13.0/plugins/ui.multiselect.js"></script>
    <script src="//cdn.jsdelivr.net/free-jqgrid/4.13.0/js/jquery.jqgrid.min.js"></script>
    <script src="//cdn.jsdelivr.net/pnotify/2.0.0/pnotify.all.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.4.5/jquery-ui-timepicker-addon.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery-timeago/1.4.1/jquery.timeago.min.js"></script>
    <!--Reference the SignalR library. -->
    <script src="/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="/signalr/hubs"></script>

    <script type="text/javascript">
        (function () {
            "use strict";
            // add an extended function to jqgrid object
            $.extend($.jgrid, {
                placeSearchDialogAboveGrid: function (parameters) {
                    var gridSelector = $.jgrid.jqID($(parameters.tableid)[0].id), // 'list'
                        $searchDialog = $("#searchmodfbox_" + gridSelector),
                        $gbox = $("#gbox_" + gridSelector),
                        $gview = $("#gview_" + gridSelector);
                    var displaySearchDialogCloseButton = typeof (parameters.displaySearchDialogCloseButton)
                        !== 'undefined' ? parameters.displaySearchDialogCloseButton : false;

                    if (!displaySearchDialogCloseButton) {
                        // hide 'close' button of the searching dialog
                        $searchDialog.find("a.ui-jqdialog-titlebar-close").hide();
                    }

                    // place the searching dialog above the grid
                    $searchDialog.insertBefore($gbox);
                    $searchDialog.css({
                        width: "100%",
                        "font-size": $gview.css("font-size"),
                        position: "relative",
                        zIndex: "auto",
                        cssFloat: "left"
                    });
                    $gbox.css({ clear: "left" });

                    // search on enter
                    if (parameters.searchOnEnter === true) {
                        $searchDialog.keypress(function (event) {
                            if (event.which === 13) {
                                $(this).focus();
                                $("#fbox_" + gridSelector + "_search").click();
                            }
                        });
                    }

                    return {
                        gridSelector: gridSelector,
                        gbox: $gbox,
                        searchDialog: $searchDialog
                    };
                },
                resizeOnWindowResizeEvent: function ($grid) {
                    // resize the grid when window's resize event triggers
                    $(window).resize(function () {
                        //// Note: checking the $grid only may not be enough
                        //// to determine whether we should do the resize or not
                        //// because the $grid is wrapped inside a #gbox div tag.
                        //// So, it is best to check the $gbox to do the resize.
                        //// skip if the grid is not visible on the screen
                        //if (!$grid.is(':visible')) {
                        //    return;
                        //}

                        var gridSelector = $.jgrid.jqID($grid[0].id),
                            $gbox = $("#gbox_" + gridSelector);

                        if ($gbox.is(':visible')) {
                            var new_width = $gbox.parent().width();

                            if ($grid.data('resize-width') != new_width) {
                                $grid.setGridWidth(new_width);
                                // remember the width so that it will not
                                // request the resize change again if the
                                // width has not been changed
                                $grid.data('resize-width', new_width);
                            }
                        }
                    });
                }
            });
        }());

        angular.module('app', ['ng']).directive('systemLogs',
        ['$compile', '$timeout', function ($compile, $timeout) {
            return {
                restrict: 'A',
                link: function (scope, element, attributes) {
                    var parameters = $.extend({
                        tableid: '#' + element[0].id,
                    }, scope.$eval(attributes.systemLogs));
                    var rowid = 0; // row counter
                    var pause = false;
                    var $caption = typeof parameters.caption === 'undefined'
                        ? 'System Logs' : parameters.caption;
                    var rowsLimit = 100;

                    $timeout(function () {
                        var $table = $(parameters.tableid);

                        $table.jqGrid({
                            caption: $caption,
                            datatype: 'local',
                            colNames: ['Row ID', 'Date', 'Level', 'Hostname', 'Logger', 'Thread', 'Identity', 'Domain', 'User', 'Message', 'Exception'],
                            colModel: [
                                { name: 'RowID', width: 60, fixed: true, sortable: true, key: true, hidden: true },
                                { name: 'TimeStamp', width: 120, fixed: true, sortable: true, search: true, searchoptions: { searchhidden: true, sopt: ['eq', 'ne', 'lt', 'le', 'gt', 'ge'], dataInit: getJqGridDefaultDatePicker }, formatter: 'date', formatoptions: { srcformat: 'ISO8601Long', newformat: 'D M d Y h:i:s A' }, cellattr: function (rowId, tv, rowObject, cm, rdata) { return jqGridCellAttrAddTimeago(rowId, tv, rowObject, cm, rdata, rowObject.TimeStamp); } },
                                { name: 'Level', width: 60, fixed: true, sortable: true, search: true, stype: "select", searchoptions: { searchhidden: true, sopt: ['eq', 'ne', 'nu', 'nn'], value: ":;Off:Off;Fatal:Fatal;Error:Error;Warn:Warn;Info:Info;Debug:Debug;All:All" } },
                                { name: 'Hostname', width: 30, sortable: false },
                                { name: 'LoggerName', width: 30, sortable: true },
                                { name: 'ThreadName', width: 30, sortable: true, hidden: true, search: true, searchoptions: { searchhidden: true } },
                                { name: 'Identity', width: 30, sortable: true, hidden: true, search: true, searchoptions: { searchhidden: true } },
                                { name: 'Domain', width: 30, sortable: true, hidden: true, search: true, searchoptions: { searchhidden: true } },
                                { name: 'UserName', width: 30, sortable: true, hidden: true, search: true, searchoptions: { searchhidden: true } },
                                { name: 'Message', width: 180, sortable: false, formatter: function (v) { return '<div>' + $.jgrid.htmlEncode(v) + '</div>'; } },
                                { name: 'ExceptionString', width: 180, sortable: false, hidden: true, search: true, searchoptions: { searchhidden: true }, formatter: function (v) { return '<div>' + $.jgrid.htmlEncode(v) + '</div>'; } }
                            ],
                            pager: parameters.tableid + '-pager',
                            rowList: [], // disable page size dropdown
                            pgbuttons: false, // disable page control like next, back button
                            pgtext: null, // disable pager text like 'Page 0 of 10'
                            sortname: 'RowID',
                            viewrecords: true,
                            sortorder: "asc",
                            autowidth: true,
                            height: 600,
                            multiselect: false,
                            // starting 1.4.9, event afterInsertRow is not called after addRowData
                            // must manually call the function using this new afterAddRow event
                            afterAddRow: function (add) {
                                var params = $table[0].p;

                                if ($.isFunction(params.afterInsertRow)) {
                                    params.afterInsertRow(add.inputData[0].RowID, add.inputData[0]);
                                }
                            },
                            afterInsertRow: function (rowid, loggedEvent, rowelem) {
                                var htmlRow = $($table.jqGrid('getInd', rowid, true));
                                var level = loggedEvent.Level.toLowerCase();

                                // format level for the row
                                switch (level) {
                                    case "error":
                                    case "fatal":
                                        htmlRow.addClass('danger');
                                        break;
                                    case "warn":
                                        htmlRow.addClass('warning');
                                        break;
                                    case "debug":
                                        htmlRow.addClass('info');
                                        break;
                                    default:
                                        break;
                                }

                                // enable to Timeago plugin for the row
                                if ($.isFunction($.timeago)) { htmlRow.find('.timeago').timeago(); }
                            },
                            loadComplete: function (data) {

                            },
                            gridComplete: function () {
                                var tid = parameters.tableid.substring(1); // table id

                                // move the rows limit select to the center of the grid's bottom bar
                                $(parameters.tableid + '-pager_center').append(
                                    $(parameters.tableid + '-rows-limit').on('change', function () {
                                        var newValue = this.value;
                                        // should remove rows with higher id value than the new value
                                        // so that the list can eliminate them properly, else those
                                        // with higher rows value will stay on the list forever
                                        for (var i = newValue; i < rowsLimit; ++i) {
                                            $table.jqGrid('delRowData', i);
                                        }
                                        rowsLimit = newValue;
                                    }).parent()
                                ).css('white-space', 'initial'); /* correct the pager height */

                                // allow grid to show Bootstrap's contextual classes
                                $table.addClass('table');

                                // resize the grid when window's resize event triggers
                                $.jgrid.resizeOnWindowResizeEvent($(this));

                                var log4net = $.connection.signalrAppenderHub;

                                log4net.client.onLoggedEvent = function (loggedEvent) {
                                    // skip processing if in pause state
                                    if (pause) { return; }

                                    rowid = ++rowid % rowsLimit; // increase the row counter

                                    // delete the old row to keep them within the limit
                                    $table.jqGrid('delRowData', rowid);

                                    // insert the new data to the top of the grid
                                    $table.jqGrid('addRowData', rowid, $.extend(
                                        loggedEvent, { RowID: rowid }), "last");

                                    // keep scrolling to the end
                                    var $scroll_table = $('#gview_' + tid).find('.ui-jqgrid-bdiv');
                                    $scroll_table.scrollTop($scroll_table[0].scrollHeight);
                                };

                                //$.connection.hub.logging = true; // turn signalr console logging on/off

                                $.connection.hub.start({ transport: ['longPolling', 'webSockets'] });
                            }
                        }).jqGrid('navGrid', parameters.tableid + '-pager',
                            { search: false, view: true, del: false, add: false, edit: false },
                            {}, // default settings for edit
                            {}, // default settings for add
                            {}, // delete instead that del:false we need this
                            {}, // search options
                            {} /* view parameters*/
                        ).jqGrid('navButtonAdd', parameters.tableid + '-pager', { // Add the column selector button
                            caption: "",
                            title: "Show/Hide Columns",
                            buttonicon: "ui-icon-bookmark",
                            onClickButton: function () {
                                jQuery(this).jqGrid('columnChooser', {
                                    width: 500,
                                    msel_opts: { dividerLocation: 0.5 },
                                    /* resize to fit the columns */
                                    done: function () { $(window).trigger('resize'); }
                                });
                            },
                            position: "last"
                        }).jqGrid('navButtonAdd', parameters.tableid + '-pager', {
                            caption: "",
                            title: "Clear the whole list",
                            buttonicon: "fa fa-eraser",
                            onClickButton: function () {
                                $table.jqGrid('clearGridData');
                            },
                            position: "first"
                        }).jqGrid('navButtonAdd', parameters.tableid + '-pager', {
                            caption: "",
                            title: "Pause the log",
                            buttonicon: "ui-icon-pause",
                            onClickButton: function (parameters, event) {
                                togglePause(event);
                            },
                            position: "first"
                        }).jqGrid('searchGrid', { // create the searching dialog
                            multipleSearch: true,
                            multipleGroup: true,
                            recreateFilter: true,
                            sopt: [
                                'cn', 'nc', 'eq', 'ne', 'lt', 'le', 'gt', 'ge',
                                'bw', 'bn', 'in', 'ni', 'ew', 'en', 'nu', 'nn'
                            ],
                            showQuery: true,
                            overlay: false,
                            drag: false,
                            resize: false,
                            afterShowSearch: function () {
                                var tid = parameters.tableid.substring(1);

                                var $searchDialog = $.jgrid.placeSearchDialogAboveGrid({
                                    tableid: parameters.tableid,
                                    searchOnEnter: true
                                }).searchDialog;
                            }
                        }).jqGrid('filterToolbar', {
                            stringResult: true,
                            searchOnEnter: false,
                            defaultSearch: 'cn'
                        });
                    });

                    function togglePause(event) {
                        pause = !pause;

                        var $target = $(event.target);

                        // change the play/pause icon of the button
                        if (pause) {
                            $target
                                .removeClass('ui-icon-pause')
                                .addClass('ui-icon-play');
                        } else {
                            $target
                                .removeClass('ui-icon-play')
                                .addClass('ui-icon-pause');
                        }

                        showCaption(pause ? "<b class='ui-state-highlight'>PAUSE</b>" : "");
                    }

                    function showCaption(msg) {
                        var caption = [];
                        var holder = $('.ui-jqgrid-title',
                            '#gview_' + $.jgrid.jqID(element[0].id));

                        caption.push($caption);
                        caption.push('&nbsp;');
                        caption.push(msg);

                        holder.html(caption.join(''));
                    }

                    getJqGridDefaultDatePicker = function (element) {
                        return $(element).datepicker({
                            // note: the date parser looks for '-' format
                            dateFormat: "mm-dd-yy",
                            constrainInput: false, // allows to embed extra text information
                            autoSize: false,
                            changeYear: true,
                            changeMonth: true,
                            showButtonPanel: true,
                            showWeek: true
                        }).attr('type', 'text'); // change type to 'text' to disable native datepicker in Google Chrome
                    };

                    jqGridCellAttrAddTimeago = function (rowId, tv, rowObject, cm, rdata, cellvalue) {
                        // stop processing if there is no date/time given
                        if (typeof (cellvalue) === 'undefined') { return ''; }

                        var attributes = [];

                        // The subtraction returns the difference between the two dates in milliseconds
                        // 36e5 is the scientific notation for 60*60*1000
                        // Note: the date string should be in this format 'yyyy/mm/dd hh:mm:ss',
                        // and to make a yyyy-mm-dd hh:mm:ss formatted date string fully browser
                        // compatible you would have to replace dashes with slashes
                        var hours = Math.abs(new Date() - new Date(cellvalue)) / 36e5;

                        // add timeago if it is less than 24 hours
                        if (hours < 24) {
                            attributes.push('class="timeago" title="');
                            attributes.push(typeof (cellvalue) !== 'undefined' ? cellvalue : tv);
                            attributes.push('"');
                        }

                        return attributes.join('');
                    };
                }
            };
        }]);
    </script>
}